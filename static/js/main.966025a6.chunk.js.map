{"version":3,"sources":["context/auth-context.tsx","context/app-context.tsx","components/HeroHeader/HeroHeader.js","components/WeekReport/WeekReport.js","components/WeekReport/SkeletonWeekReport.jsx","components/HabitOverview/HabitOverview.js","components/HabitEntry/HabitEntry.js","components/HabitEntry/SkeletonHabitEntry .jsx","components/HabitEntryList/HabitEntryList.js","components/TestChart/TestChart.tsx","view/AuthenticatedApp/AuthenticatedApp.tsx","view/LoginRegister/LoginRegister.tsx","App.tsx","serviceWorker.js","index.js","images/mind-toon.png","images/baby-groot-meditation.jpeg","images/full-mind-toon.png"],"names":["API_URL","AuthContext","createContext","useAuth","React","useContext","AuthProvider","children","useState","token","setToken","authError","setAuthError","login","username","password","a","clearAuthError","url","fetch","method","headers","body","JSON","stringify","response","json","status","Error","message","register","logout","Provider","value","isLoggedIn","trim","length","MEDITATION_API_URL","AppContext","useApp","AppProvider","isLoading","setIsLoading","appError","meditations","setMeditations","getAllMeditations","URL","options","Authorization","toString","data","addMeditation","date","postingDate","format","deleteMeditation","id","updateMeditation","awarenessPoints","HeroHeader","className","src","mindToon","alt","DayDot","isGreen","WeekReport","weekEntries","name","weekHabitMap","count","monday","tuesday","wednesday","thursday","friday","saturday","sunday","forEach","entry","day","moment","add","isoWeekday","getWeekHabitMap","SkeletonWeekReport","style","height","width","maxWidth","HabitOverview","habitEntries","refreshData","userName","handleHabitPost","start","startOf","end","endOf","filter","isBetween","undefined","getThisWeeksHabits","onClick","logoImg","HabitEditPanel","points","togglePanel","newDate","setNewDate","newPoints","setNewPoints","handleUpdate","htmlFor","type","min","max","onChange","evt","target","HabitEntry","showEditPanel","setShowEditPanel","handleDelete","SkeletonHabitEntry","marginBottom","minWidth","HabitEntryList","listOfEntries","num","i","push","key","createSkeletonEntries","map","TestChart","labelsX","dataY","e","unshift","labels","datasets","label","fill","backgroundColor","borderColor","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","scales","xAxes","time","unit","ticks","labelOffset","padding","yAxes","beginAtZero","stepSize","layout","left","right","top","bottom","AuthenticatedApp","useEffect","LoginRegister","authRegister","useForm","handleSubmit","errors","isLoginForm","setIsLoginForm","onSubmit","console","log","placeholder","ref","required","minLength","maxLength","preventDefault","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.966025a6.chunk.js","sourcesContent":["import React, { createContext, FC, useState } from 'react';\n\n// Test url for now\n// TODO: replace to hosted UR\nconst API_URL = 'https://mind-tracker-api-v2.herokuapp.com/'\n// const API_URL = 'http://localhost:8000/';\n\ninterface AuthData {\n  token: string;\n  isLoggedIn(): boolean;\n  login(username: string, password: string): void;\n  logout(): void;\n  register(username: string, password: string): void;\n  authError: Error | null;\n}\n\nconst AuthContext = createContext<AuthData>({} as AuthData);\n\nexport const useAuth = (): AuthData => React.useContext<AuthData>(AuthContext);\n\nexport const AuthProvider: FC = ({ children }) => {\n  const [token, setToken] = useState('');\n  const [authError, setAuthError] = useState(null);\n\n  const login = async (username: string, password: string) => {\n    clearAuthError();\n    const url = `${API_URL}user/login`;\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password }),\n      });\n      const json = await response.json();\n      if (response.status !== 200) throw new Error(`Unable to login: ${json.message}`);\n      \n      setToken(json.token);\n    } catch (err) {\n      setAuthError(err);\n    }\n  };\n\n  const register = async (username: string, password: string) => {\n    clearAuthError();\n    const url = `${API_URL}user/register`;\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password }),\n      });\n      const json = await response.json();\n      if (response.status !== 201) throw new Error(`Unable to register: ${json.message}`);\n      setToken(json.token);\n    } catch (err) {\n      setAuthError(err);\n    }\n  };\n\n  const isLoggedIn = (): boolean=>{\n    return token.trim().length > 0;\n  }\n\n  const clearAuthError = () => {\n    if (authError) setAuthError(null);\n  };\n\n  const logout = async () => {\n    setToken('');\n  };\n  return (\n    <AuthContext.Provider value={{ token, authError, login, logout, register, isLoggedIn: isLoggedIn }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","import React, { createContext, FC, useState } from 'react';\nimport { useAuth } from './auth-context';\n\ninterface AppData {\n  isLoading: boolean;\n  setIsLoading: React.Dispatch<React.SetStateAction<boolean>>;\n  meditations: Meditation[];\n  getAllMeditations(): void;\n  addMeditation(date: moment.Moment | null): void;\n  deleteMeditation(id: number): void;\n  updateMeditation(id: number, date: string, awarenessPoints: number): void\n  appError: Error | null;\n}\n\nexport interface Meditation {\n  id: string;\n  postingDate: string;\n  username: string;\n  awarenessPoints: number;\n}\n\nconst MEDITATION_API_URL =\n  'https://mind-tracker-api-v2.herokuapp.com/meditation';\nconst AppContext = createContext<AppData>({} as AppData);\n\nexport const useApp = (): AppData => React.useContext<AppData>(AppContext);\n\nexport const AppProvider: FC = ({ children }) => {\n  const { token } = useAuth();\n  const [isLoading, setIsLoading] = useState(false);\n  const [appError, setAuthError] = useState(null);\n\n  const [meditations, setMeditations] = useState([]);\n\n  const getAllMeditations = async () => {\n    setIsLoading(true);\n    try {\n      const url = new URL(MEDITATION_API_URL);\n      const options = {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n      };\n      const response = await fetch(url.toString(), options);\n      const json = await response.json();\n      if (response.status !== 200) throw new Error(json.message);\n      setMeditations(json.data);\n      clearAuthError();\n    } catch (err) {\n      setAuthError(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const addMeditation = async (date: moment.Moment | null = null) => {\n    try {\n      const url = new URL(MEDITATION_API_URL);\n      const data = { postingDate: date ? date?.format('YYYY-MM-DD') : '' };\n      const options = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(data),\n      };\n      const response = await fetch(url.toString(), options);\n      const json = await response.json();\n      if (response.status !== 201) throw new Error(json.message);\n      clearAuthError();\n    } catch (err) {\n      setAuthError(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const deleteMeditation = async (id: number = -1) => {\n    try {\n      const url = new URL(MEDITATION_API_URL);\n      const data = { id };\n      const options = {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(data),\n      };\n      const response = await fetch(url.toString(), options);\n      const json = await response.json();\n      if (response.status !== 200) throw new Error(json.message);\n      clearAuthError();\n    } catch (err) {\n      setAuthError(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n\n  const updateMeditation = async (id: number = -1, date: string = '', awarenessPoints: number ) => {\n    try {\n      const url = new URL(MEDITATION_API_URL);\n      const data = { id, postingDate: date, awarenessPoints };\n      const options = {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(data),\n      };\n      const response = await fetch(url.toString(), options);\n      const json = await response.json();\n      if (response.status !== 200) throw new Error(json.message);\n      clearAuthError();\n    } catch (err) {\n      setAuthError(err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const clearAuthError = () => {\n    if (appError) setAuthError(null);\n  };\n\n  return (\n    <AppContext.Provider\n      value={{\n        isLoading,\n        appError,\n        setIsLoading,\n        meditations,\n        getAllMeditations,\n        addMeditation,\n        deleteMeditation,\n        updateMeditation\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\n","import React from \"react\";\nimport \"./HeroHeader.css\";\nimport mindToon from \"../../images/mind-toon.png\";\n\nfunction HeroHeader() {\n  return (\n    <header className=\"hero-header\">\n      <div className=\"left-header\">\n        <h1>Mind Tracking</h1>\n        <p>\n          Keep track of your meditation habit and see your progress. Simply click\n          on the meditation panel to add an entry\n        </p>\n      </div>\n      <div className=\"right-header\">\n        <img className=\"brain-toon\" src={mindToon} alt=\"Large brain cartoon\" />\n      </div>\n    </header>\n  );\n}\n\nexport default HeroHeader;\n","import React from 'react';\nimport './WeekReport.css';\nimport moment from 'moment';\n\nfunction WeekReport({ weekEntries = [], name = 'habit' }) {\n  // get this weeks habit map with a counter for days at least one entry was made\n  const getWeekHabitMap = (weekEntries = []) => {\n    const weekHabitMap = {\n      awarenessPoints: 0,\n      count: 0,\n      monday: false,\n      tuesday: false,\n      wednesday: false,\n      thursday: false,\n      friday: false,\n      saturday: false,\n      sunday: false,\n    };\n\n    weekEntries.forEach((entry) => {\n      const date = moment(entry.postingDate).add(1, 'd');\n      const day = date.isoWeekday();\n      weekHabitMap.count++;\n      weekHabitMap.awarenessPoints += entry.awarenessPoints;\n\n      switch (day) {\n        case 1:\n          if (!weekHabitMap.monday) {\n            weekHabitMap.monday = true;\n          }\n          break;\n        case 2:\n          if (!weekHabitMap.tuesday) {\n            weekHabitMap.tuesday = true;\n          }\n          break;\n        case 3:\n          if (!weekHabitMap.wednesday) {\n            weekHabitMap.wednesday = true;\n          }\n          break;\n        case 4:\n          if (!weekHabitMap.thursday) {\n            weekHabitMap.thursday = true;\n          }\n          break;\n        case 5:\n          if (!weekHabitMap.friday) {\n            weekHabitMap.friday = true;\n          }\n          break;\n        case 6:\n          if (!weekHabitMap.saturday) {\n            weekHabitMap.saturday = true;\n          }\n          break;\n        case 7:\n          if (!weekHabitMap.sunday) {\n            weekHabitMap.sunday = true;\n          }\n          break;\n        default:\n      }\n    });\n\n    return weekHabitMap;\n  };\n\n  const {\n    monday,\n    tuesday,\n    wednesday,\n    thursday,\n    friday,\n    saturday,\n    sunday,\n    count,\n    awarenessPoints,\n  } = getWeekHabitMap(weekEntries);\n\n  return (\n    <div className=\"week-report\">\n      <div className=\"left-report\">\n        <h1>{name}</h1>\n        <div className=\"day-dot-list\">\n          <DayDot isGreen={monday} />\n          <DayDot isGreen={tuesday} />\n          <DayDot isGreen={wednesday} />\n          <DayDot isGreen={thursday} />\n          <DayDot isGreen={friday} />\n          <DayDot isGreen={saturday} />\n          <DayDot isGreen={sunday} />\n        </div>\n        <p className=\"report-text\"> {`${count}/7`}</p>\n      </div>\n\n      <div className=\"right-report\">\n        <p>Points</p>\n        <p>{awarenessPoints}</p>\n      </div>\n    </div>\n  );\n}\n\nconst DayDot = ({ isGreen = false }) => {\n  return (\n    <span className={`day-dot  ${isGreen ? 'day-dot-filled' : ''} `}></span>\n  );\n};\n\nexport default WeekReport;\n","import React from 'react';\nimport './WeekReport.css';\nimport Skeleton from 'react-loading-skeleton';\n\nfunction SkeletonWeekReport({ weekEntries = [], name = 'habit' }) {\n  return (\n    <div className=\"week-report\">\n      <div className=\"left-report\">\n        <h1>{name}</h1>\n        <div className=\"day-dot-list\">\n          <Skeleton\n            style={{ height: '2em', width: '100%', maxWidth: '200px' }}\n          />\n        </div>\n        <p className=\"report-text\">\n          {' '}\n          <Skeleton\n            style={{ height: '1em', width: '20px', maxWidth: '50px' }}\n          />\n        </p>\n      </div>\n\n      <div className=\"right-report\">\n        <p>\n          <Skeleton\n            style={{ height: '1em', width: '20px', maxWidth: '50px' }}\n          />\n        </p>\n        <p>\n          <Skeleton\n            style={{ height: '1em', width: '100%', maxWidth: '200px' }}\n          />\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default SkeletonWeekReport;\n","import React from 'react';\nimport './HabitOverview.css';\n// TODO: abstract the logo image\nimport logoImg from '../../images/baby-groot-meditation.jpeg';\nimport moment from 'moment';\nimport { useApp } from '../../context/app-context';\n\nimport WeekReport from '../WeekReport/WeekReport';\nimport SkeletonWeekReport from '../WeekReport/SkeletonWeekReport';\n\nconst HabitOverview = ({\n  habitEntries = [],\n  userName,\n  refreshData,\n  name = 'Meditation',\n}) => {\n  const { isLoading, addMeditation } = useApp();\n\n  const getThisWeeksHabits = (habitEntries = []) => {\n    const start = moment().startOf('isoWeek');\n    const end = moment().endOf('isoWeek');\n    // TODO: check back on why you add an extra day to entryData\n    // Maybe the way it is being saved in that database\n    const weekEntries = habitEntries.filter((entry) => {\n      const entryDate = moment(entry.postingDate).add(1, 'd');\n      return entryDate.isBetween(start, end, undefined, '[]');\n    });\n\n    return weekEntries;\n  };\n\n  const handleHabitPost = async () => {\n    await addMeditation();\n    refreshData();\n  };\n\n  const weekEntries = getThisWeeksHabits(habitEntries);\n\n  return (\n    <button className=\"habit-overview\" onClick={handleHabitPost}>\n      <div className=\"logo-img-container\">\n        <img className=\"logo-img\" src={logoImg} alt={`${name} logo`} />\n      </div>\n\n      {isLoading ? (\n        <SkeletonWeekReport weekEntries={weekEntries} name={name} />\n      ) : (\n        <WeekReport weekEntries={weekEntries} name={name} />\n      )}\n    </button>\n  );\n};\n\nexport default HabitOverview;\n","import React, { useState } from 'react';\nimport { useApp } from '../../context/app-context';\n\nimport moment from 'moment';\n\nfunction HabitEntry({ name = 'Meditation', entry = {}, refreshData }) {\n  const [showEditPanel, setShowEditPanel] = useState(false);\n  const { deleteMeditation } = useApp();\n\n  const togglePanel = () => {\n    setShowEditPanel(() => {\n      setShowEditPanel(!showEditPanel);\n    });\n  };\n\n  const handleDelete = async () => {\n    await deleteMeditation(entry.id);\n    refreshData();\n  };\n\n  const date = moment(entry.postingDate).add(1, 'd').format('MM-DD-YYYY');\n  return (\n    <div className=\"habit-entry-container\">\n      <div className=\"habit-entry\">\n        <h3>{name}</h3>\n        <div>\n          <p> Points: {entry.awarenessPoints} </p>\n          <p> {date} </p>\n        </div>\n\n        <div className=\"entry-btn-group\">\n          <button className=\"entry-btn entry-btn-update\" onClick={togglePanel}>\n            edit\n          </button>\n          <button className=\"entry-btn entry-btn-delete\" onClick={handleDelete}>\n            delete\n          </button>\n        </div>\n      </div>\n      {showEditPanel && (\n        <HabitEditPanel\n          date={moment(entry.postingDate).add(1, 'd').format('YYYY-MM-DD')}\n          points={entry.awarenessPoints}\n          togglePanel={togglePanel}\n          refreshData={refreshData}\n          entry={entry}\n        />\n      )}\n    </div>\n  );\n}\n\nfunction HabitEditPanel({\n  date = '2020-01-01',\n  points = 1,\n  togglePanel,\n  entry = {},\n  refreshData,\n}) {\n  const [newDate, setNewDate] = useState(date);\n  const [newPoints, setNewPoints] = useState(points);\n  const { updateMeditation } = useApp();\n\n  const handleDateChange = (evt) => {\n    setNewDate(evt.target.value);\n  };\n\n  const handlePointsChange = (evt) => {\n    setNewPoints(evt.target.value);\n  };\n\n  const handleUpdate = async () => {\n    togglePanel();\n    const { id } = entry;\n    await updateMeditation(id, newDate, newPoints);\n    refreshData();\n  };\n\n  return (\n    <div className=\"edit-panel\">\n      <div className=\"change-inputs\">\n        <label htmlFor=\"newPoints\">\n          Points:\n          <input\n            type=\"number\"\n            name=\"date\"\n            id=\"newPoints\"\n            value={newPoints}\n            min=\"1\"\n            max=\"200\"\n            onChange={handlePointsChange}\n          />\n        </label>\n        <label htmlFor=\"newDate\">\n          New Date\n          <input\n            type=\"date\"\n            name=\"date\"\n            id=\"newDate\"\n            value={newDate}\n            min=\"2020-01-01\"\n            onChange={handleDateChange}\n          />\n        </label>\n      </div>\n      <button className=\"entry-btn entry-btn-update\" onClick={handleUpdate}>\n        Update\n      </button>\n    </div>\n  );\n}\n\nexport default HabitEntry;\n","import React from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nfunction SkeletonHabitEntry() {\n  return (\n    <div  width=\"80%\" style={{ marginBottom:\"10px\" }}>\n      <Skeleton style={{ height: '50px', minWidth: '10px', width: '80%' }} />\n    </div>\n  );\n}\n\nexport default SkeletonHabitEntry;\n","import React from 'react';\nimport './HabitEntryList.css';\n\nimport HabitEntry from '../HabitEntry/HabitEntry';\nimport SkeletonHabitEntry from '../HabitEntry/SkeletonHabitEntry ';\nimport { useApp } from '../../context/app-context';\n\nfunction HabitEntryList({ habitEntries = [], refreshData }) {\n  const { isLoading } = useApp();\n  const createSkeletonEntries = (num) => {\n    const listOfEntries = [];\n    for (let i = 0; i < num; i++) {\n      listOfEntries.push(<SkeletonHabitEntry key={i} />);\n    }\n    return listOfEntries;\n  };\n\n  const createEntries = () => {\n    return habitEntries.map((entry) => (\n      <HabitEntry key={entry.id} refreshData={refreshData} entry={entry} />\n    ));\n  };\n\n  const listOfEntries = isLoading ? createSkeletonEntries(20) : createEntries();\n\n  return (\n    <div className=\"habit-entry-list\">\n      <h2>Habit list</h2>\n      <div className=\"entries-container\">{listOfEntries}</div>\n    </div>\n  );\n}\n\nexport default HabitEntryList;\n","import React, { FC } from 'react';\nimport './TestChart.scss';\nimport { Line } from 'react-chartjs-2';\nimport { Meditation } from '../../context/app-context';\nimport moment from 'moment';\n\ninterface ChartData {\n  habitEntries: Meditation[];\n}\n\nexport const TestChart: FC<ChartData> = ({ habitEntries }) => {\n  const labelsX: string[] = [];\n  const dataY: number[] = [];\n  habitEntries.forEach((e) => {\n    labelsX.unshift(moment(e.postingDate).add(1, 'd').format('MM-DD'));\n    dataY.unshift(e.awarenessPoints);\n  });\n\n  //No Longer used due to missing first and last x axis label\n  // const newData = habitEntries.map((e: Meditation) => ({\n  //   t: moment(e.postingDate).add(1, 'd').toDate(),\n  //   y: e.awarenessPoints,\n  // }));\n\n  const data = {\n    labels: labelsX,\n    datasets: [\n      {\n        label: 'Meditation',\n        fill: false,\n        backgroundColor: 'rgba(75,192,192,0.4)',\n        borderColor: 'rgba(75,192,192,1)',\n        borderJoinStyle: 'miter',\n        pointBorderColor: 'rgba(75,192,192,1)',\n        pointBackgroundColor: '#fff',\n        pointBorderWidth: 2,\n        pointHoverRadius: 10,\n        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n        pointHoverBorderColor: 'rgba(220,220,220,1)',\n        pointHoverBorderWidth: 2,\n        pointRadius: 5,\n        pointHitRadius: 10,\n        data: dataY,\n      },\n    ],\n  };\n\n  const options = {\n    scales: {\n      xAxes: [\n        {\n          type: 'time',\n          time: {\n            unit: 'day',\n          },\n\n          ticks: {\n            labelOffset: 0,\n            padding: 5,\n          },\n        },\n      ],\n      yAxes:[{\n        ticks:{\n          beginAtZero: true,\n          stepSize: 1\n        }\n      }]\n    },\n    layout: {\n      padding: {\n        left: 5,\n        right: 5,\n        top: 5,\n        bottom: 5,\n      },\n    },\n  };\n\n  return (\n    <div className=\"trend-chart\">\n      <h1>Trend Chart</h1>\n\n      <div\n        className=\"chart-container\"\n        style={{ height: '100%', width: '100%' }}\n      >\n        <Line data={data} options={options} />\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './AuthenticatedApp.scss';\nimport HeroHeader from '../../components/HeroHeader/HeroHeader';\nimport HabitOverview from '../../components/HabitOverview/HabitOverview';\nimport HabitEntryList from '../../components/HabitEntryList/HabitEntryList';\nimport { useApp } from '../../context/app-context';\n\n// Test not included in live site\nimport { TestChart } from '../../components/TestChart/TestChart';\n\nexport const AuthenticatedApp = () => {\n  const { meditations, getAllMeditations } = useApp();\n  const [userName, setUserName] = useState('demoUser');\n\n  // Initial get all of all meditation entries\n  useEffect(() => {\n    getAllMeditations();\n  }, []);\n\n  const refreshData = () => {\n    getAllMeditations();\n  };\n\n  return (\n    <>\n      <HeroHeader />\n\n      <div className=\"weekly-overview-list\">\n        <h2>This weeks overview </h2>\n\n        <HabitOverview\n          habitEntries={meditations}\n          userName={userName}\n          refreshData={refreshData}\n        />\n\n        <TestChart habitEntries={meditations} />\n      </div>\n\n      <HabitEntryList refreshData={refreshData} habitEntries={meditations} />\n    </>\n  );\n};\n","import React, { FC, useState } from 'react';\nimport './LoginRegister.scss';\nimport { useForm } from 'react-hook-form';\nimport { useAuth } from '../../context/auth-context';\nimport mindToon from '../../images/full-mind-toon.png';\n\ninterface DataI {\n  username: string;\n  password: string;\n}\n\nexport const LoginRegister: FC = () => {\n  const { login, register: authRegister, authError } = useAuth();\n  const { register, handleSubmit, errors } = useForm();\n  const [isLoginForm, setIsLoginForm] = useState(true);\n\n  const onSubmit = (data: DataI) => {\n    const { username, password } = data;\n    isLoginForm ? login(username, password) : authRegister(username, password);\n    console.log(authError);\n  };\n\n  const swapForm = (): void => {\n    setIsLoginForm(!isLoginForm);\n  };\n\n  return (\n    <div className=\"login-register\">\n      <div className=\"intro\">\n        <h1>Mind Tracking</h1>\n        <img className=\"brain-toon\" src={mindToon} alt=\"Large brain cartoon\" />\n      </div>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"header\">\n          <h2\n            onClick={() => setIsLoginForm(true)}\n            className={isLoginForm ? 'active' : ''}\n          >\n            Login\n          </h2>\n          <span>/</span>\n          <h2\n            onClick={() => setIsLoginForm(false)}\n            className={!isLoginForm ? 'active' : ''}\n          >\n            Register\n          </h2>\n        </div>\n        <p className=\"error-warning\">{authError ? authError.message : ''}</p>\n\n        <input\n          type=\"text\"\n          placeholder=\"username\"\n          name=\"username\"\n          ref={register({ required: true, minLength: 4, maxLength: 30 })}\n        />\n\n        <p className=\"error-warning\">\n          {errors.username\n            ? 'username is required and must be 4-30 character long'\n            : ''}\n        </p>\n\n        <input\n          type=\"password\"\n          placeholder=\"password\"\n          name=\"password\"\n          ref={register({ required: true, minLength: 4, maxLength: 30 })}\n        />\n        <p className=\"error-warning\">\n          {errors.password\n            ? 'password is required and must be 4-30 character long'\n            : ''}\n        </p>\n\n        <input\n          className=\"btn\"\n          type=\"submit\"\n          value={isLoginForm ? 'Login' : 'Register'}\n        />\n\n        <button\n          onClick={(e) => {\n            e.preventDefault();\n            login('demoUser', 'pass');\n          }}\n          className=\"demo-btn btn\"\n        >\n          Use Demo User\n        </button>\n\n        <hr />\n\n        <p className=\"swap-form-msg\">\n          {isLoginForm\n            ? `Don't have an account? `\n            : `Already have an account? `}\n          <span className=\"swap-form-btn\" onClick={swapForm}>\n            {!isLoginForm ? 'Login' : 'Register'}\n          </span>\n        </p>\n      </form>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { useAuth } from './context/auth-context';\nimport './App.css';\n\nimport { AppProvider } from './context/app-context';\n\nimport { AuthenticatedApp } from './view/AuthenticatedApp/AuthenticatedApp';\nimport { LoginRegister } from './view/LoginRegister/LoginRegister';\n\nconst App: FC = () => {\n  const { isLoggedIn } = useAuth();\n  return isLoggedIn() ? (\n    <AppProvider>\n      <AuthenticatedApp />\n    </AppProvider>\n  ) : (\n    <LoginRegister />\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { AuthProvider } from './context/auth-context';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AuthProvider>\n      <App />\n    </AuthProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/mind-toon.d86f34f6.png\";","module.exports = __webpack_public_path__ + \"static/media/baby-groot-meditation.6f4dc16d.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/full-mind-toon.a6bcf780.png\";"],"sourceRoot":""}