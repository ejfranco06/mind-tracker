{"version":3,"sources":["images/mind-toon.png","images/baby-groot-meditation.jpeg","components/HeroHeader/HeroHeader.js","utils/helper-functions.js","apis/mind-tracker-api.js","components/WeekReport/WeekReport.js","components/HabitOverview/HabitOverview.js","components/HabitEntry/HabitEntry.js","components/HabitEntryList/HabitEntryList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HeroHeader","className","src","mindToon","alt","getStartOfWeek","date","Date","zeroHourADate","diff","getDate","getDay","setDate","getEndOfWeek","setHours","createZeroHourDate","split","year","month","day","newDate","meditationApiUrl","a","userName","url","URL","searchParams","append","fetch","toString","response","json","addMeditation","data","options","method","headers","body","JSON","stringify","deleteMeditation","id","updateMeditation","console","log","DayDot","isGreen","WeekReport","weekEntries","name","weekHabitMap","count","monday","tuesday","wednesday","thursday","friday","saturday","sunday","forEach","entry","getUTCDay","getWeekHabitMap","length","HabitOverview","habitEntries","refreshData","handleHabitPost","ok","start","end","filter","entryDate","getTime","getThisWeeksHabits","onClick","logoImg","HabitEditPanel","togglePanel","useState","setNewDate","handleUpdate","htmlFor","type","value","min","onChange","evt","target","HabitEntry","showEditPanel","setShowEditPanel","handleDelete","formatStringDate","HabitEntryList","listOfEntries","map","key","App","meditationEntries","setMeditationEntries","useEffect","getAllMeditations","then","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.49f226d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mind-toon.d86f34f6.png\";","module.exports = __webpack_public_path__ + \"static/media/baby-groot-meditation.6f4dc16d.jpeg\";","import React from \"react\";\nimport \"./HeroHeader.css\";\nimport mindToon from \"../../images/mind-toon.png\";\n\nfunction HeroHeader() {\n  return (\n    <header className=\"hero-header\">\n      <div className=\"left-header\">\n        <h1>Mind Tracking</h1>\n        <p>\n          Keep track of your meditation habit and see your progress. Simply click\n          on the meditation panel to add an entry\n        </p>\n      </div>\n      <div className=\"right-header\">\n        <img className=\"brain-toon\" src={mindToon} alt=\"Large brain cartoon\" />\n      </div>\n    </header>\n  );\n}\n\nexport default HeroHeader;\n","// find start of the week\nconst getStartOfWeek = () => {\n  const date = new Date();\n  zeroHourADate(date);\n  const diff = date.getDate() - date.getDay() + (date.getDay() === 0 ? -6 : 1);\n  return new Date(date.setDate(diff));\n};\n\n// find end of the week\nconst getEndOfWeek = ()=>{\n  let date = getStartOfWeek();\n  date.setDate( date.getDate() + 6);\n  return date;\n}\n\n// Set a date to zero hour\nconst zeroHourADate = (date) =>{\n  date.setHours(0,0,0,0);\n};\n\n// Create a date with hour set to 0\nconst createZeroHourDate = (date = \"\") =>{\n  const [year, month, day] = date.split(\"-\");\n  // Subtracted on 1 from month to line up with current time\n  // Not sure why javascript behaves this way\n  const newDate = new Date(year, month-1, day);\n  return newDate;\n};\n\n// Format date to string with a mm/dd/yyyy format\nconst formatDates = (date) =>{\n  // Added  1 to month to line up with current time\n  // Not sure why javascript behaves this way\n  let month = date.getMonth() + 1;\n  month = month.toString().padStart(2, \"0\");\n  let day = date.getDate();\n  day = day.toString().padStart(2, \"0\");\n  const year = date.getFullYear();\n  return `${month}/${day}/${year}`;\n};\n\n// Format a string date yyyy-mm-dd to mm-day-yyyy \nconst formatStringDate = (date = \"\") =>{\n  const [year, month, day] = date.split(\"-\");\n  return `${month}-${day}-${year}`;\n}\n\nexport {getStartOfWeek, formatDates, createZeroHourDate, getEndOfWeek, formatStringDate};\n","const meditationApiUrl = \"https://mind-tracker-api.herokuapp.com/meditation\";\n\n// Get all meditations for a given user\nasync function getAllMeditations(userName = \"\") {\n  const url = new URL(meditationApiUrl);\n  url.searchParams.append(\"userName\", userName);\n  const response = await fetch(url.toString());\n  return response.json();\n}\n\n// Post a habit\nasync function addMeditation(userName = \"\", date = null) {\n  const url = new URL(meditationApiUrl);\n  const data = { userName, date };\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  };\n\n  return fetch(url.toString(), options);\n}\n\n\n// Delete a habit\nasync function deleteMeditation(userName = \"\", id = -1) {\n  const url = new URL(meditationApiUrl);\n  const data = { userName, id };\n  const options = {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  };\n\n  return fetch(url.toString(), options);\n}\n\n// Update a habit\nasync function updateMeditation(userName = \"\", id = -1, date = \"\") {\n  const url = new URL(meditationApiUrl);\n  const data = { userName, id, date };\n  console.log(data);\n  const options = {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  };\n\n  return fetch(url.toString(), options);\n}\n\n\n\n\nexport { getAllMeditations, meditationApiUrl, addMeditation, deleteMeditation, updateMeditation };\n","import React from \"react\";\nimport \"./WeekReport.css\";\n\nimport {\n  createZeroHourDate,\n} from \"../../utils/helper-functions\";\n\nfunction WeekReport({ weekEntries = [], name = \"habit\" }) {\n  // get this weeks habit map with a counter for days at least one entry was made\n  const getWeekHabitMap = (weekEntries = []) => {\n    const weekHabitMap = {\n      count: 0,\n      monday: false,\n      tuesday: false,\n      wednesday: false,\n      thursday: false,\n      friday: false,\n      saturday: false,\n      sunday: false,\n    };\n\n    weekEntries.forEach((entry) => {\n      const date = createZeroHourDate(entry.date);\n      const day = date.getUTCDay();\n\n      switch (day) {\n        case 0:\n          if (!weekHabitMap.sunday) {\n            weekHabitMap.sunday = true;\n            weekHabitMap.count++;\n          }\n          break;\n        case 1:\n          if (!weekHabitMap.monday) {\n            weekHabitMap.monday = true;\n            weekHabitMap.count++;\n          }\n          break;\n        case 2:\n          if (!weekHabitMap.tuesday) {\n            weekHabitMap.tuesday = true;\n            weekHabitMap.count++;\n          }\n          break;\n        case 3:\n          if (!weekHabitMap.wednesday) {\n            weekHabitMap.wednesday = true;\n            weekHabitMap.count++;\n          }\n          break;\n        case 4:\n          if (!weekHabitMap.thursday) {\n            weekHabitMap.thursday = true;\n            weekHabitMap.count++;\n          }\n          break;\n        case 5:\n          if (!weekHabitMap.friday) {\n            weekHabitMap.friday = true;\n            weekHabitMap.count++;\n          }\n          break;\n        case 6:\n          if (!weekHabitMap.saturday) {\n            weekHabitMap.saturday = true;\n            weekHabitMap.count++;\n          }\n          break;\n        default:\n      }\n    });\n\n    return weekHabitMap;\n  };\n\n  const {\n    monday,\n    tuesday,\n    wednesday,\n    thursday,\n    friday,\n    saturday,\n    sunday,\n    count,\n  } = getWeekHabitMap(weekEntries);\n\n  return (\n    <div className=\"week-report\">\n      <div className=\"left-report\">\n        <h1>{name}</h1>\n        <div className=\"day-dot-list\">\n          <DayDot isGreen={monday} />\n          <DayDot isGreen={tuesday} />\n          <DayDot isGreen={wednesday} />\n          <DayDot isGreen={thursday} />\n          <DayDot isGreen={friday} />\n          <DayDot isGreen={saturday} />\n          <DayDot isGreen={sunday} />\n        </div>\n        <p className=\"report-text\"> {`${count}/7`}</p>\n      </div>\n\n      <div className=\"right-report\">\n        <p>Total</p>\n        <p>{weekEntries.length}</p>\n      </div>\n    </div>\n  );\n}\n\nconst DayDot = ({ isGreen = false }) => {\n  return (\n    <span className={`day-dot  ${isGreen ? \"day-dot-filled\" : \"\"} `}></span>\n  );\n};\n\nexport default WeekReport;\n","import React from \"react\";\nimport \"./HabitOverview.css\";\n// TODO: abstract the logo image\nimport logoImg from \"../../images/baby-groot-meditation.jpeg\";\n\nimport {\n  getStartOfWeek,\n  getEndOfWeek,\n  createZeroHourDate,\n} from \"../../utils/helper-functions\";\n\nimport { addMeditation } from \"../../apis/mind-tracker-api\";\n\nimport WeekReport from \"../WeekReport/WeekReport\";\n\nconst HabitOverview = ({ habitEntries, userName, refreshData }) => {\n  //temp value\n  const name = \"Meditation\";\n\n  // Get the habits that fall within this current week Monday-Sunday\n  const getThisWeeksHabits = (habitEntries = []) => {\n    const start = getStartOfWeek();\n    const end = getEndOfWeek();\n\n    const weekEntries = habitEntries.filter((entry) => {\n      const entryDate = createZeroHourDate(entry.date);\n      return (\n        entryDate.getTime() >= start.getTime() &&\n        entryDate.getTime() <= end.getTime()\n      );\n    });\n\n    return weekEntries;\n  };\n\n  const handleHabitPost = async () => {\n    const response = await addMeditation(userName);\n    if (response.ok) refreshData();\n    else console.log(\"Post error\");\n  };\n\n  const weekEntries = getThisWeeksHabits(habitEntries);\n\n  return (\n    <button className=\"habit-overview\" onClick={handleHabitPost}>\n      <div className=\"logo-img-container\">\n        <img className=\"logo-img\" src={logoImg} alt={`${name} logo`} />\n      </div>\n      <WeekReport weekEntries={weekEntries} name={name} />\n    </button>\n  );\n};\n\nexport default HabitOverview;\n","import React, { useState } from \"react\";\nimport {deleteMeditation} from \"../../apis/mind-tracker-api\";\nimport {updateMeditation} from \"../../apis/mind-tracker-api\";\nimport {formatStringDate} from \"../../utils/helper-functions\";\n\n\nfunction HabitEntry({ name = \"Meditation\", entry = {}, refreshData}) {\n  const [showEditPanel, setShowEditPanel] = useState(false);\n\n  const togglePanel = () => {\n    setShowEditPanel(() => {\n      setShowEditPanel(!showEditPanel);\n    });\n  };\n\n  const handleDelete = async ()=>{\n    const {userName, id} = entry;\n    const response = await deleteMeditation(userName, id);\n    if (response.ok) refreshData();\n    else console.log(\"Delete error\");\n  }\n\n  const date = formatStringDate(entry.date);\n  return (\n    <div className=\"habit-entry-container\">\n      <div className=\"habit-entry\">\n        <h3>{name}</h3>\n        <p> {date} </p>\n        <div className=\"entry-btn-group\">\n          <button className=\"entry-btn entry-btn-update\" onClick={togglePanel}>\n            edit\n          </button>\n          <button className=\"entry-btn entry-btn-delete\" onClick={handleDelete}>delete</button>\n        </div>\n      </div>\n      {showEditPanel && (\n        <HabitEditPanel date={date} togglePanel={togglePanel} refreshData={refreshData} entry={entry} />\n      )}\n    </div>\n  );\n}\n\nfunction HabitEditPanel({ date = \"2020-01-01\", togglePanel, entry ={}, refreshData }) {\n  const [newDate, setNewDate] = useState(date);\n  const handleChange = (evt) => {\n    setNewDate(evt.target.value);\n  };\n\n  const handleUpdate = async ()  => {\n    togglePanel();\n    const {userName, id} = entry;\n    const response = await updateMeditation(userName, id, newDate);\n    if (response.ok) refreshData();\n    else console.log(\"Update error\");\n\n  };\n\n  return (\n    <div className=\"edit-panel\">\n      <label htmlFor=\"newDate\">\n        New Date\n        <input\n          type=\"date\"\n          name=\"date\"\n          id=\"newDate\"\n          value={newDate}\n          min=\"2020-01-01\"\n          onChange={handleChange}\n        />\n      </label>\n      <button className=\"entry-btn entry-btn-update\" onClick={handleUpdate}>\n        Update\n      </button>\n    </div>\n  );\n}\n\nexport default HabitEntry;\n","import React from \"react\";\nimport \"./HabitEntryList.css\";\n\nimport HabitEntry from \"../HabitEntry/HabitEntry\";\n\nfunction HabitEntryList({\n  name = \"Meditation\",\n  habitEntries = [],\n  refreshData,\n}) {\n  const listOfEntries = habitEntries.map((entry) => (\n    <HabitEntry key={entry.id} refreshData={refreshData} entry={entry} />\n  ));\n  const date = \"2020/05/10\";\n  return (\n    <div className=\"habit-entry-list\">\n      <h2>Habit list</h2>\n      <div className=\"entries-container\">{listOfEntries}</div>\n    </div>\n  );\n}\n\nexport default HabitEntryList;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport HeroHeader from \"./components/HeroHeader/HeroHeader\";\nimport HabitOverview from \"./components/HabitOverview/HabitOverview\";\nimport HabitEntryList from \"./components/HabitEntryList/HabitEntryList\";\n\nimport { getAllMeditations } from \"./apis/mind-tracker-api\";\n\nfunction App() {\n  const [meditationEntries, setMeditationEntries] = useState([]);\n  const [userName, setUserName] = useState(\"demoUser\");\n\n  // Initial get all of all meditation entries\n  useEffect(() => {\n    refreshData();\n  }, []);\n\n  const refreshData = () => {\n    getAllMeditations(userName).then((data) => setMeditationEntries(data));\n  };\n\n  return (\n    <>\n      <HeroHeader />\n      <div className=\"weekly-overview-list\">\n        <h2>This weeks overview </h2>\n        <HabitOverview\n          habitEntries={meditationEntries}\n          userName={userName}\n          refreshData={refreshData}\n        />\n      </div>\n\n      <HabitEntryList\n        refreshData={refreshData}\n        habitEntries={meditationEntries}\n      />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}