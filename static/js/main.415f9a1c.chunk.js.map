{"version":3,"sources":["images/baby-groot-meditation.jpeg","utils/helper-functions.js","components/WeekReport/WeekReport.js","components/HabitOverview/HabitOverview.js","apis/mind-tracker-api.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getStartOfWeek","date","Date","zeroHourADate","diff","getDate","getDay","setDate","getEndOfWeek","setHours","createZeroHourDate","split","year","month","day","newDate","DayDot","isGreen","className","WeekReport","weekEntries","name","weekHabitMap","count","monday","tuesday","wednesday","thursday","friday","saturday","sunday","forEach","entry","getUTCDay","getWeekHabitMap","length","HabitOverview","habitEntries","userName","start","end","filter","entryDate","getTime","getThisWeeksHabits","src","logoImg","alt","meditationApiUrl","a","url","URL","searchParams","append","fetch","toString","response","json","App","useState","meditationEntries","setMeditationEntries","useEffect","getAllMeditations","then","data","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.415f9a1c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/baby-groot-meditation.6f4dc16d.jpeg\";","// find start of the week\nconst getStartOfWeek = () => {\n  const date = new Date();\n  zeroHourADate(date);\n  const diff = date.getDate() - date.getDay() + (date.getDay() === 0 ? -6 : 1);\n  return new Date(date.setDate(diff));\n};\n\n// find end of the week\nconst getEndOfWeek = ()=>{\n  let date = getStartOfWeek();\n  date.setDate( date.getDate() + 6);\n  return date;\n}\n\n// Set a date to zero hour\nconst zeroHourADate = (date) =>{\n  date.setHours(0,0,0,0);\n};\n\n// Create a date with hour set to 0\nconst createZeroHourDate = (date = \"\") =>{\n  const [year, month, day] = date.split(\"-\");\n  // Subtracted on 1 from month to line up with current time\n  // Not sure why javascript behaves this way\n  const newDate = new Date(year, month-1, day);\n  return newDate;\n};\n\n// Format date to string with a mm/dd/yyyy format\nconst formatDates = (date) =>{\n  // Added  1 to month to line up with current time\n  // Not sure why javascript behaves this way\n  let month = date.getMonth() + 1;\n  month = month.toString().padStart(2, \"0\");\n  let day = date.getDate();\n  day = day.toString().padStart(2, \"0\");\n  const year = date.getFullYear();\n  return `${month}/${day}/${year}`;\n};\n\nexport {getStartOfWeek, formatDates, createZeroHourDate, getEndOfWeek};\n","import React, { useState, useEffect } from \"react\";\nimport \"./WeekReport.css\";\n\nimport {\n  getStartOfWeek,\n  formatDates,\n  getEndOfWeek,\n  createZeroHourDate,\n} from \"../../utils/helper-functions\";\n\nfunction WeekReport({ weekEntries = [], name = \"habit\" }) {\n  // get this weeks habit map with a counter for days at least one entry was made\n  const getWeekHabitMap = (weekEntries = []) => {\n    const weekHabitMap = {\n      count: 0,\n      monday: false,\n      tuesday: false,\n      wednesday: false,\n      thursday: false,\n      friday: false,\n      saturday: false,\n      sunday: false,\n    };\n\n    weekEntries.forEach((entry) => {\n      const date = createZeroHourDate(entry.date);\n      const day = date.getUTCDay();\n\n      switch (day) {\n        case 0:\n          if (!weekHabitMap.sunday) {\n            weekHabitMap.sunday = true;\n            weekHabitMap.count++;\n          }\n          break;\n        case 1:\n          if (!weekHabitMap.monday) {\n            weekHabitMap.monday = true;\n            weekHabitMap.count++;\n          }\n          break;\n        case 2:\n          if (!weekHabitMap.tuesday) {\n            weekHabitMap.tuesday = true;\n            weekHabitMap.count++;\n          }\n          break;\n        case 3:\n          if (!weekHabitMap.wednesday) {\n            weekHabitMap.wednesday = true;\n            weekHabitMap.count++;\n          }\n          break;\n        case 4:\n          if (!weekHabitMap.thursday) {\n            weekHabitMap.thursday = true;\n            weekHabitMap.count++;\n          }\n          break;\n        case 5:\n          if (!weekHabitMap.friday) {\n            weekHabitMap.friday = true;\n            weekHabitMap.count++;\n          }\n          break;\n        case 6:\n          if (!weekHabitMap.saturday) {\n            weekHabitMap.saturday = true;\n            weekHabitMap.count++;\n          }\n          break;\n        default:\n      }\n    });\n\n    return weekHabitMap;\n  };\n\n  const {\n    monday,\n    tuesday,\n    wednesday,\n    thursday,\n    friday,\n    saturday,\n    sunday,\n    count,\n  } = getWeekHabitMap(weekEntries);\n\n  return (\n    <div className=\"week-report\">\n      <div className=\"left-report\">\n        <h1>{name}</h1>\n        <div className=\"day-dot-list\">\n          <DayDot isGreen={monday} />\n          <DayDot isGreen={tuesday} />\n          <DayDot isGreen={wednesday} />\n          <DayDot isGreen={thursday} />\n          <DayDot isGreen={friday} />\n          <DayDot isGreen={saturday} />\n          <DayDot isGreen={sunday} />\n        </div>\n        <p className=\"report-text\"> {`${count}/7`}</p>\n      </div>\n\n      <div className=\"right-report\">\n        <p>Total</p>\n        <p>{weekEntries.length}</p>\n      </div>\n    </div>\n  );\n}\n\nconst DayDot = ({ isGreen = false }) => {\n  return (\n    <span className={`day-dot  ${isGreen ? \"day-dot-filled\" : \"\"} `}></span>\n  );\n};\n\nexport default WeekReport;\n","import React, { useState, useEffect } from \"react\";\nimport \"./HabitOverview.css\";\n// TODO: abstract the logo image\nimport logoImg from \"../../images/baby-groot-meditation.jpeg\";\n\nimport {\n  getStartOfWeek,\n  formatDates,\n  getEndOfWeek,\n  createZeroHourDate,\n} from \"../../utils/helper-functions\";\n\nimport WeekReport from \"../WeekReport/WeekReport\";\n\nconst HabitOverview = ({ habitEntries, userName }) => {\n  //temp value\n  const name = \"Meditation\";\n\n\n  // Get the habits that fall within this current week Monday-Sunday\n  const getThisWeeksHabits = (habitEntries = []) => {\n    const start = getStartOfWeek();\n    const end = getEndOfWeek();\n\n    const weekEntries = habitEntries.filter((entry) => {\n      const entryDate = createZeroHourDate(entry.date);\n      return (\n        entryDate.getTime() >= start.getTime() &&\n        entryDate.getTime() <= end.getTime()\n      );\n    });\n\n    return weekEntries;\n  };\n\n  const weekEntries = getThisWeeksHabits(habitEntries);\n  \n  return (\n    <button className=\"habit-overview\">\n      <div className=\"logo-img-container\">\n        <img className=\"logo-img\" src={logoImg} alt={`${name} logo`}/>\n      </div>\n      < WeekReport weekEntries={weekEntries} name={name}/>\n    </button>\n  );\n};\n\nexport default HabitOverview;\n","const meditationApiUrl = \"https://mind-tracker-api.herokuapp.com/meditation\";\n\n\n// Get all meditations for a given user\nasync function getAllMeditations(userName = \"\") {\n  const url = new URL(meditationApiUrl);\n  url.searchParams.append(\"userName\", userName);\n  const response = await fetch(url.toString());\n  return response.json();\n}\n\n\n\nexport { getAllMeditations, meditationApiUrl };\n","import React, {useState, useEffect} from \"react\";\nimport \"./App.css\";\nimport HabitOverview from \"./components/HabitOverview/HabitOverview\";\n\nimport {getAllMeditations} from \"./apis/mind-tracker-api\";\n\nfunction App() {\n  const [meditationEntries, setMeditationEntries] = useState([]);\n  const [userName, setUserName] = useState(\"demoUser\");\n\n\n  // Initial get all of all meditation entries\n  useEffect(() => {\n    getAllMeditations(userName)\n    .then(data => setMeditationEntries(data));\n  }, []);\n\n  return (\n    <>\n      <h1>Mind Tracker 7</h1>\n      <HabitOverview  habitEntries={meditationEntries}/>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}