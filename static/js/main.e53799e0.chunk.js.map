{"version":3,"sources":["images/mind-toon.png","images/baby-groot-meditation.jpeg","images/full-mind-toon.png","context/auth-context.tsx","components/HeroHeader/HeroHeader.js","utils/helper-functions.js","apis/mind-tracker-api.js","components/WeekReport/WeekReport.js","components/WeekReport/SkeletonWeekReport.jsx","components/HabitOverview/HabitOverview.js","components/HabitEntry/HabitEntry.js","components/HabitEntry/SkeletonHabitEntry .jsx","components/HabitEntryList/HabitEntryList.js","view/AuthenticatedApp/AuthenticatedApp.tsx","view/LoginRegister/LoginRegister.tsx","App.tsx","serviceWorker.js","index.js"],"names":["module","exports","API_URL","AuthContext","createContext","useAuth","React","useContext","AuthProvider","children","useState","token","setToken","authError","setAuthError","login","username","password","a","clearAuthError","url","fetch","method","headers","body","JSON","stringify","response","status","Error","json","data","register","logout","Provider","value","isLoggedIn","trim","length","HeroHeader","className","src","mindToon","alt","getStartOfWeek","date","Date","zeroHourADate","diff","getDate","getDay","setDate","getEndOfWeek","setHours","createZeroHourDate","split","year","month","day","newDate","meditationApiUrl","getAllMeditations","userName","URL","searchParams","append","toString","addMeditation","options","deleteMeditation","id","updateMeditation","console","log","DayDot","isGreen","WeekReport","weekEntries","name","weekHabitMap","count","monday","tuesday","wednesday","thursday","friday","saturday","sunday","forEach","entry","getUTCDay","getWeekHabitMap","SkeletonWeekReport","style","height","width","maxWidth","HabitOverview","habitEntries","refreshData","handleHabitPost","ok","start","end","filter","entryDate","getTime","getThisWeeksHabits","onClick","logoImg","HabitEditPanel","togglePanel","setNewDate","handleUpdate","htmlFor","type","min","onChange","evt","target","HabitEntry","showEditPanel","setShowEditPanel","handleDelete","formatStringDate","SkeletonHabitEntry","marginBottom","minWidth","HabitEntryList","listOfEntries","num","i","push","key","createSkeletonEntries","map","AuthenticatedApp","meditationEntries","setMeditationEntries","useEffect","then","LoginRegister","authRegister","useForm","handleSubmit","errors","isLoginForm","setIsLoginForm","onSubmit","message","placeholder","ref","required","minLength","maxLength","e","preventDefault","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.e53799e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mind-toon.d86f34f6.png\";","module.exports = __webpack_public_path__ + \"static/media/baby-groot-meditation.6f4dc16d.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/full-mind-toon.a6bcf780.png\";","import React, { createContext, FC, useState } from 'react';\n\n// Test url for now\n// TODO: replace to hosted UR\nconst API_URL = 'https://mind-tracker-api-v2.herokuapp.com/'\n// const API_URL = 'http://localhost:8000/';\n\ninterface AuthData {\n  token: string;\n  isLoggedIn(): boolean;\n  login(username: string, password: string): void;\n  logout(): void;\n  register(username: string, password: string): void;\n  authError: Error | null;\n}\n\nconst AuthContext = createContext<AuthData>({} as AuthData);\n\nexport const useAuth = (): AuthData => React.useContext<AuthData>(AuthContext);\n\nexport const AuthProvider: FC = ({ children }) => {\n  const [token, setToken] = useState('');\n  const [authError, setAuthError] = useState(null);\n\n  const login = async (username: string, password: string) => {\n    clearAuthError();\n    const url = `${API_URL}user/login`;\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password }),\n      });\n      if (response.status !== 200) throw new Error('Unable to login');\n      const data = await response.json();\n      setToken(data.token);\n    } catch (err) {\n      setAuthError(err);\n    }\n  };\n\n  const register = async (username: string, password: string) => {\n    clearAuthError();\n    const url = `${API_URL}user/register`;\n    try {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password }),\n      });\n      if (response.status !== 201) throw new Error('Unable register');\n      const data = await response.json();\n      setToken(data.token);\n    } catch (err) {\n      setAuthError(err);\n    }\n  };\n\n  const isLoggedIn = (): boolean=>{\n    return token.trim().length > 0;\n  }\n\n  const clearAuthError = () => {\n    if (authError) setAuthError(null);\n  };\n\n  const logout = async () => {\n    setToken('');\n  };\n  return (\n    <AuthContext.Provider value={{ token, authError, login, logout, register, isLoggedIn: isLoggedIn }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n","import React from \"react\";\nimport \"./HeroHeader.css\";\nimport mindToon from \"../../images/mind-toon.png\";\n\nfunction HeroHeader() {\n  return (\n    <header className=\"hero-header\">\n      <div className=\"left-header\">\n        <h1>Mind Tracking</h1>\n        <p>\n          Keep track of your meditation habit and see your progress. Simply click\n          on the meditation panel to add an entry\n        </p>\n      </div>\n      <div className=\"right-header\">\n        <img className=\"brain-toon\" src={mindToon} alt=\"Large brain cartoon\" />\n      </div>\n    </header>\n  );\n}\n\nexport default HeroHeader;\n","// find start of the week\nconst getStartOfWeek = () => {\n  const date = new Date();\n  zeroHourADate(date);\n  const diff = date.getDate() - date.getDay() + (date.getDay() === 0 ? -6 : 1);\n  return new Date(date.setDate(diff));\n};\n\n// find end of the week\nconst getEndOfWeek = ()=>{\n  let date = getStartOfWeek();\n  date.setDate( date.getDate() + 6);\n  return date;\n}\n\n// Set a date to zero hour\nconst zeroHourADate = (date) =>{\n  date.setHours(0,0,0,0);\n};\n\n// Create a date with hour set to 0\nconst createZeroHourDate = (date = \"\") =>{\n  const [year, month, day] = date.split(\"-\");\n  // Subtracted on 1 from month to line up with current time\n  // Not sure why javascript behaves this way\n  const newDate = new Date(year, month-1, day);\n  return newDate;\n};\n\n// Format date to string with a mm/dd/yyyy format\nconst formatDates = (date) =>{\n  // Added  1 to month to line up with current time\n  // Not sure why javascript behaves this way\n  let month = date.getMonth() + 1;\n  month = month.toString().padStart(2, \"0\");\n  let day = date.getDate();\n  day = day.toString().padStart(2, \"0\");\n  const year = date.getFullYear();\n  return `${month}/${day}/${year}`;\n};\n\n// Format a string date yyyy-mm-dd to mm-day-yyyy \nconst formatStringDate = (date = \"\") =>{\n  const [year, month, day] = date.split(\"-\");\n  return `${month}-${day}-${year}`;\n}\n\nexport {getStartOfWeek, formatDates, createZeroHourDate, getEndOfWeek, formatStringDate};\n","const meditationApiUrl = \"https://mind-tracker-api.herokuapp.com/meditation\";\n// =============== Testing Data ==================================\nasync function getFakeMeditations(userName= \"\"){\n  \n} \n\n\n\n\n// Get all meditations for a given user\nasync function getAllMeditations(userName = \"\") {\n  const url = new URL(meditationApiUrl);\n  url.searchParams.append(\"userName\", userName);\n  const response = await fetch(url.toString());\n  return response.json();\n}\n\n// Post a habit\nasync function addMeditation(userName = \"\", date = null) {\n  const url = new URL(meditationApiUrl);\n  const data = { userName, date };\n  const options = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  };\n\n  return fetch(url.toString(), options);\n}\n\n\n// Delete a habit\nasync function deleteMeditation(userName = \"\", id = -1) {\n  const url = new URL(meditationApiUrl);\n  const data = { userName, id };\n  const options = {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  };\n\n  return fetch(url.toString(), options);\n}\n\n// Update a habit\nasync function updateMeditation(userName = \"\", id = -1, date = \"\") {\n  const url = new URL(meditationApiUrl);\n  const data = { userName, id, date };\n  console.log(data);\n  const options = {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(data),\n  };\n\n  return fetch(url.toString(), options);\n}\n\n\n\n\nexport { getAllMeditations, meditationApiUrl, addMeditation, deleteMeditation, updateMeditation };\n","import React from \"react\";\nimport \"./WeekReport.css\";\n\nimport {\n  createZeroHourDate,\n} from \"../../utils/helper-functions\";\n\nfunction WeekReport({ weekEntries = [], name = \"habit\" }) {\n  // get this weeks habit map with a counter for days at least one entry was made\n  const getWeekHabitMap = (weekEntries = []) => {\n    const weekHabitMap = {\n      count: 0,\n      monday: false,\n      tuesday: false,\n      wednesday: false,\n      thursday: false,\n      friday: false,\n      saturday: false,\n      sunday: false,\n    };\n\n    weekEntries.forEach((entry) => {\n      const date = createZeroHourDate(entry.date);\n      const day = date.getUTCDay();\n\n      switch (day) {\n        case 0:\n          if (!weekHabitMap.sunday) {\n            weekHabitMap.sunday = true;\n            weekHabitMap.count++;\n          }\n          break;\n        case 1:\n          if (!weekHabitMap.monday) {\n            weekHabitMap.monday = true;\n            weekHabitMap.count++;\n          }\n          break;\n        case 2:\n          if (!weekHabitMap.tuesday) {\n            weekHabitMap.tuesday = true;\n            weekHabitMap.count++;\n          }\n          break;\n        case 3:\n          if (!weekHabitMap.wednesday) {\n            weekHabitMap.wednesday = true;\n            weekHabitMap.count++;\n          }\n          break;\n        case 4:\n          if (!weekHabitMap.thursday) {\n            weekHabitMap.thursday = true;\n            weekHabitMap.count++;\n          }\n          break;\n        case 5:\n          if (!weekHabitMap.friday) {\n            weekHabitMap.friday = true;\n            weekHabitMap.count++;\n          }\n          break;\n        case 6:\n          if (!weekHabitMap.saturday) {\n            weekHabitMap.saturday = true;\n            weekHabitMap.count++;\n          }\n          break;\n        default:\n      }\n    });\n\n    return weekHabitMap;\n  };\n\n  const {\n    monday,\n    tuesday,\n    wednesday,\n    thursday,\n    friday,\n    saturday,\n    sunday,\n    count,\n  } = getWeekHabitMap(weekEntries);\n\n  return (\n    <div className=\"week-report\">\n      <div className=\"left-report\">\n        <h1>{name}</h1>\n        <div className=\"day-dot-list\">\n          <DayDot isGreen={monday} />\n          <DayDot isGreen={tuesday} />\n          <DayDot isGreen={wednesday} />\n          <DayDot isGreen={thursday} />\n          <DayDot isGreen={friday} />\n          <DayDot isGreen={saturday} />\n          <DayDot isGreen={sunday} />\n        </div>\n        <p className=\"report-text\"> {`${count}/7`}</p>\n      </div>\n\n      <div className=\"right-report\">\n        <p>Total</p>\n        <p>{weekEntries.length}</p>\n      </div>\n    </div>\n  );\n}\n\nconst DayDot = ({ isGreen = false }) => {\n  return (\n    <span className={`day-dot  ${isGreen ? \"day-dot-filled\" : \"\"} `}></span>\n  );\n};\n\nexport default WeekReport;\n","import React from 'react';\nimport './WeekReport.css';\nimport Skeleton from 'react-loading-skeleton';\n\nfunction SkeletonWeekReport({ weekEntries = [], name = 'habit' }) {\n  return (\n    <div className=\"week-report\">\n      <div className=\"left-report\">\n        <h1>{name}</h1>\n        <div className=\"day-dot-list\">\n          <Skeleton\n            style={{ height: '2em', width: '100%', maxWidth: '200px' }}\n          />\n        </div>\n        <p className=\"report-text\">\n          {' '}\n          <Skeleton\n            style={{ height: '1em', width: '20px', maxWidth: '50px' }}\n          />\n        </p>\n      </div>\n\n      <div className=\"right-report\">\n        <p>\n          <Skeleton\n            style={{ height: '1em', width: '20px', maxWidth: '50px' }}\n          />\n        </p>\n        <p>\n          <Skeleton\n            style={{ height: '1em', width: '100%', maxWidth: '200px' }}\n          />\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default SkeletonWeekReport;\n","import React from 'react';\nimport './HabitOverview.css';\n// TODO: abstract the logo image\nimport logoImg from '../../images/baby-groot-meditation.jpeg';\n\nimport {\n  getStartOfWeek,\n  getEndOfWeek,\n  createZeroHourDate,\n} from '../../utils/helper-functions';\n\nimport { addMeditation } from '../../apis/mind-tracker-api';\n\nimport WeekReport from '../WeekReport/WeekReport';\nimport SkeletonWeekReport from '../WeekReport/SkeletonWeekReport';\n\nconst HabitOverview = ({ habitEntries = [], userName, refreshData }) => {\n  //temp value\n  const name = 'Meditation';\n  // Get the habits that fall within this current week Monday-Sunday\n  const getThisWeeksHabits = (habitEntries = []) => {\n    const start = getStartOfWeek();\n    const end = getEndOfWeek();\n\n    const weekEntries = habitEntries.filter((entry) => {\n      const entryDate = createZeroHourDate(entry.date);\n      return (\n        entryDate.getTime() >= start.getTime() &&\n        entryDate.getTime() <= end.getTime()\n      );\n    });\n\n    return weekEntries;\n  };\n\n  const handleHabitPost = async () => {\n    const response = await addMeditation(userName);\n    if (response.ok) refreshData();\n    else console.log('Post error');\n  };\n\n  const weekEntries = getThisWeeksHabits(habitEntries);\n\n  return (\n    <button className=\"habit-overview\" onClick={handleHabitPost}>\n      <div className=\"logo-img-container\">\n        <img className=\"logo-img\" src={logoImg} alt={`${name} logo`} />\n      </div>\n\n      {habitEntries.length <= 0 ? (\n        <SkeletonWeekReport weekEntries={weekEntries} name={name} />\n      ) : (\n        <WeekReport weekEntries={weekEntries} name={name} />\n      )}\n    </button>\n  );\n};\n\nexport default HabitOverview;\n","import React, { useState } from \"react\";\nimport {deleteMeditation} from \"../../apis/mind-tracker-api\";\nimport {updateMeditation} from \"../../apis/mind-tracker-api\";\nimport {formatStringDate} from \"../../utils/helper-functions\";\n\n\nfunction HabitEntry({ name = \"Meditation\", entry = {}, refreshData}) {\n  const [showEditPanel, setShowEditPanel] = useState(false);\n\n  const togglePanel = () => {\n    setShowEditPanel(() => {\n      setShowEditPanel(!showEditPanel);\n    });\n  };\n\n  const handleDelete = async ()=>{\n    const {userName, id} = entry;\n    const response = await deleteMeditation(userName, id);\n    if (response.ok) refreshData();\n    else console.log(\"Delete error\");\n  }\n\n  const date = formatStringDate(entry.date);\n  return (\n    <div className=\"habit-entry-container\">\n      <div className=\"habit-entry\">\n        <h3>{name}</h3>\n        <p> {date} </p>\n        <div className=\"entry-btn-group\">\n          <button className=\"entry-btn entry-btn-update\" onClick={togglePanel}>\n            edit\n          </button>\n          <button className=\"entry-btn entry-btn-delete\" onClick={handleDelete}>delete</button>\n        </div>\n      </div>\n      {showEditPanel && (\n        <HabitEditPanel date={date} togglePanel={togglePanel} refreshData={refreshData} entry={entry} />\n      )}\n    </div>\n  );\n}\n\nfunction HabitEditPanel({ date = \"2020-01-01\", togglePanel, entry ={}, refreshData }) {\n  const [newDate, setNewDate] = useState(date);\n  const handleChange = (evt) => {\n    setNewDate(evt.target.value);\n  };\n\n  const handleUpdate = async ()  => {\n    togglePanel();\n    const {userName, id} = entry;\n    const response = await updateMeditation(userName, id, newDate);\n    if (response.ok) refreshData();\n    else console.log(\"Update error\");\n\n  };\n\n  return (\n    <div className=\"edit-panel\">\n      <label htmlFor=\"newDate\">\n        New Date\n        <input\n          type=\"date\"\n          name=\"date\"\n          id=\"newDate\"\n          value={newDate}\n          min=\"2020-01-01\"\n          onChange={handleChange}\n        />\n      </label>\n      <button className=\"entry-btn entry-btn-update\" onClick={handleUpdate}>\n        Update\n      </button>\n    </div>\n  );\n}\n\nexport default HabitEntry;\n","import React from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nfunction SkeletonHabitEntry() {\n  return (\n    <div  width=\"80%\" style={{ marginBottom:\"10px\" }}>\n      <Skeleton style={{ height: '50px', minWidth: '10px', width: '80%' }} />\n    </div>\n  );\n}\n\nexport default SkeletonHabitEntry;\n","import React from 'react';\nimport './HabitEntryList.css';\n\nimport HabitEntry from '../HabitEntry/HabitEntry';\nimport SkeletonHabitEntry from '../HabitEntry/SkeletonHabitEntry ';\n\nfunction HabitEntryList({ habitEntries = [], refreshData }) {\n  const createSkeletonEntries = (num) => {\n    const listOfEntries = [];\n    for (let i = 0; i < num; i++) {\n      listOfEntries.push(<SkeletonHabitEntry key={i} />);\n    }\n    return listOfEntries;\n  };\n\n  const createEntries = () => {\n    return habitEntries.map((entry) => (\n      <HabitEntry key={entry.id} refreshData={refreshData} entry={entry} />\n    ));\n  };\n\n  const listOfEntries =\n    habitEntries.length <= 0 ? createSkeletonEntries(20) : createEntries();\n\n  return (\n    <div className=\"habit-entry-list\">\n      <h2>Habit list</h2>\n      <div className=\"entries-container\">{listOfEntries}</div>\n    </div>\n  );\n}\n\nexport default HabitEntryList;\n","import React, { useState, useEffect } from \"react\";\nimport \"./AuthenticatedApp.scss\";\nimport HeroHeader from \"../../components/HeroHeader/HeroHeader\";\nimport HabitOverview from \"../../components/HabitOverview/HabitOverview\";\nimport HabitEntryList from \"../../components/HabitEntryList/HabitEntryList\";\n\n\n// Test not included in live site\nimport {TestChart} from \"../../components/TestChart/TestChart\";\n\nimport { getAllMeditations } from \"../../apis/mind-tracker-api\";\n\nexport const AuthenticatedApp = ()=> {\n\n  const [meditationEntries, setMeditationEntries] = useState([]);\n  const [userName, setUserName] = useState(\"demoUser\");\n\n  // Initial get all of all meditation entries\n  useEffect(() => {\n    getAllMeditations(userName).then((data: any) => setMeditationEntries(data));\n  }, [userName]);\n\n  const refreshData = () => {\n    getAllMeditations(userName).then((data: any) => setMeditationEntries(data));\n  };\n\n  return (\n    <>\n      <HeroHeader />\n      <div className=\"weekly-overview-list\">\n        <h2>This weeks overview </h2>\n        {/* <TestChart /> */}\n\n        <HabitOverview\n          habitEntries={meditationEntries}\n          userName={userName}\n          refreshData={refreshData}\n        />\n      </div>\n\n      <HabitEntryList\n        refreshData={refreshData}\n        habitEntries={meditationEntries}\n      />\n    </>\n  );\n}\n","import React, { FC, useState } from 'react';\nimport './LoginRegister.scss';\nimport { useForm } from 'react-hook-form';\nimport { useAuth } from '../../context/auth-context';\nimport mindToon from '../../images/full-mind-toon.png';\n\ninterface DataI {\n  username: string;\n  password: string;\n}\n\nexport const LoginRegister: FC = () => {\n  const { login, register: authRegister, isLoggedIn, authError } = useAuth();\n  const { register, handleSubmit, errors } = useForm();\n  const [isLoginForm, setIsLoginForm] = useState(true);\n\n  const onSubmit = (data: DataI) => {\n    const { username, password } = data;\n    isLoginForm ? login(username, password) : authRegister(username, password);\n    console.log(authError);\n  };\n\n  const swapForm = (): void => {\n    setIsLoginForm(!isLoginForm);\n  };\n\n  return (\n    <div className=\"login-register\">\n      <div className=\"intro\">\n        <h1>Mind Tracking</h1>\n        <img className=\"brain-toon\" src={mindToon} alt=\"Large brain cartoon\" />\n      </div>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className=\"header\">\n          <h2\n            onClick={() => setIsLoginForm(true)}\n            className={isLoginForm ? 'active' : ''}\n          >\n            Login\n          </h2>\n          <span>/</span>\n          <h2\n            onClick={() => setIsLoginForm(false)}\n            className={!isLoginForm ? 'active' : ''}\n          >\n            Register\n          </h2>\n        </div>\n        <p className=\"error-warning\">{authError ? authError.message : ''}</p>\n\n        <input\n          type=\"text\"\n          placeholder=\"username\"\n          name=\"username\"\n          ref={register({ required: true, minLength: 4, maxLength: 30 })}\n        />\n\n        <p className=\"error-warning\">\n          {errors.username\n            ? 'username is required and must be 4-30 character long'\n            : ''}\n        </p>\n\n        <input\n          type=\"password\"\n          placeholder=\"password\"\n          name=\"password\"\n          ref={register({ required: true, minLength: 4, maxLength: 30 })}\n        />\n        <p className=\"error-warning\">\n          {errors.password\n            ? 'password is required and must be 4-30 character long'\n            : ''}\n        </p>\n\n        <input\n          className=\"btn\"\n          type=\"submit\"\n          value={isLoginForm ? 'Login' : 'Register'}\n        />\n\n        <button\n          onClick={(e) => {\n            e.preventDefault();\n            login('demoUser', 'pass');\n          }}\n          className=\"demo-btn btn\"\n        >\n          Use Demo User\n        </button>\n\n        <hr />\n\n        <p className=\"swap-form-msg\">\n          {isLoginForm\n            ? `Don't have an account? `\n            : `Already have an account? `}\n          <span className=\"swap-form-btn\" onClick={swapForm}>\n            {isLoginForm ? 'Login' : 'Register'}\n          </span>\n        </p>\n      </form>\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport { useAuth } from './context/auth-context';\nimport './App.css';\n\nimport { AuthenticatedApp } from './view/AuthenticatedApp/AuthenticatedApp';\nimport { LoginRegister } from \"./view/LoginRegister/LoginRegister\";\n\nconst App: FC = () => {\n  const { isLoggedIn } = useAuth();\n  return isLoggedIn() ? <AuthenticatedApp /> : <LoginRegister />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { AuthProvider } from './context/auth-context';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AuthProvider>\n      <App />\n    </AuthProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}